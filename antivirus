#!/usr/bin/env python3

import ssl
import urllib.request
import argparse
import os
import subprocess
import binascii
import sys
import os.path


def updateDatabase():
    whitelistURL = "https://raw.githubusercontent.com/caokenny/CSE331-Antivirus/master/whitelist.txt"
    virusesURL = "https://raw.githubusercontent.com/caokenny/CSE331-Antivirus/master/viruses.txt"

    ctx = ssl.create_default_context()
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE

    whitelist = open("whitelist.txt", "w")
    with urllib.request.urlopen(whitelistURL, context=ctx) as u:
        whitelist.write(u.read().decode('ASCII'))
    whitelist.close()

    viruses = open("viruses.txt", "w")
    with urllib.request.urlopen(virusesURL, context=ctx) as u:
        viruses.write(u.read().decode('ASCII'))
    viruses.close()

def scanFile(file):
    if os.access(file, os.R_OK):
        checksum = subprocess.check_output(["shasum", file]).decode('utf-8').split()[0]
        whitelist = open("whitelist.txt", "r")
        for line in whitelist:
            if line.rstrip('\n') == checksum:
                whitelist.close()
                return True

        viruses = open("viruses.txt", "r")
        chunk_size = 1024
        with open(file, "rb") as f:
        	while True:
	            content = binascii.hexlify(f.read(chunk_size)).decode("utf-8")
	            if not content:
	            	break
	            for line in viruses:
	                line = line.split(",")[1].rstrip('\n').split(" ")
	                line = "".join(line)
	                if line in content:
	                    os.chmod(file, 000)
	                    os.rename(file, file + ".infected")
	                    sys.stdout.write("Virus detected: " + file + ".infected" + "\n")
	                    return False
        return True

def scanDir(dir):
    filesInDir = subprocess.check_output(["ls", "-a1", dir]).decode('utf-8')
    filesInDir = filesInDir.split("\n")[2:]
    filesInDir.pop(len(filesInDir)-1)
    for file in filesInDir:
        filePath = os.path.join(dir, file)
        if os.path.isfile(filePath):
            scanFile(filePath)
        elif os.path.isdir(filePath):
            scanDir(filePath)

if __name__ == "__main__":
    # create ArgumentParser
    parser = argparse.ArgumentParser(description="Antivirus for Linux")

    # fill ArgumentParser with information about program arguments
    parser.add_argument("-f", "--file", help="a file or directory for scanning")
    parser.add_argument("-u", "--update", help="update whitelist and viruslist database",
                        action="store_true")
    parser.add_argument("-a", "--access", help="antivirus will run in the background and scan files before they are opened",
                         action="store_true")

    # parse command-line arguments
    # if parse_args() is called with no args, ArgumentParser will automatically determine the command-line args from sys.argv
    args = parser.parse_args()

    # if update is true, update whitelist and viruslist database
    if args.update:
        updateDatabase()

    if args.file is not None:
        # if absolute path of file/directory is not provided, get the absolute path
        if not os.path.isabs(args.file):
            fileAbsPath = os.path.abspath(args.file)
        else:
            fileAbsPath = args.file
        # if a file is provided, scan it and exit
        if os.path.isfile(fileAbsPath):
            scanFile(fileAbsPath)
            exit(0)

        # if a directory is provided, scan it and exit
        elif os.path.isdir(fileAbsPath):
            scanDir(fileAbsPath)
            exit(0)

